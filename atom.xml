<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>橘子的分享</title>
  <icon>https://www.gravatar.com/avatar/d36b09eccb28c87495b57a89b9754a00</icon>
  <subtitle>橘享</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="orangecj.cn/"/>
  <updated>2020-10-08T11:35:00.392Z</updated>
  <id>orangecj.cn/</id>
  
  <author>
    <name>橘子orange</name>
    <email>1208917130@qq.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>app | 如何制作一个app</title>
    <link href="orangecj.cn/app/"/>
    <id>orangecj.cn/app/</id>
    <published>2020-10-08T10:00:00.000Z</published>
    <updated>2020-10-08T11:35:00.392Z</updated>
    
    <content type="html"><![CDATA[<p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/07/03/NjyaGV.jpg" alt="logo"></p><blockquote><p>用了taro后，突然想试试做一个app，先做一个Android的试试，因为我只要Android的手机，调试方便。</p></blockquote><h2 id="创建app项目"><a href="#创建app项目" class="headerlink" title="创建app项目"></a>创建app项目</h2><p>听说HBuilder做app很方便，于是我用了HBuilder。</p><blockquote><p>文件 –&gt; 新建 –&gt; 项目 –&gt; 5+APP(默认模板)</p></blockquote><p>得到一个空的项目，在 <em>manifest.json</em>这个文件中，入口文件默认是index.html。</p><p>图标设置，选择一个png图标。</p><p>启动界面设置，可以自定义启动图，也是png格式的图片。</p><p>其他的可以不用修改，默认就好了。</p><h2 id="写app项目"><a href="#写app项目" class="headerlink" title="写app项目"></a>写app项目</h2><p>先将一个网页打包为app吧。</p><p>在index.html中，加载网页。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">window.onload &#x3D; function() &#123;</span><br><span class="line">    location.href &#x3D; &#39;http:&#x2F;&#x2F;www.orangecj.cn&#39;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也可以将已经完成的项目打包，将入口文件改为你打包好的入口文件，例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dist&#x2F;index.html</span><br></pre></td></tr></table></figure><h2 id="运行app"><a href="#运行app" class="headerlink" title="运行app"></a>运行app</h2><p>我们需要真机调试，看看效果如何。</p><p>将自己手机调为开发者模式。</p><p>打开usb调试。</p><p>用usb将电脑和手机连接起来，手机会提示匹配啥的，允许就好了。</p><p>在HBuilder中，点击运行 –&gt; 运行到手机或者模拟器 –&gt; 运行。会在你手机上安装一个HBuilder的调试基座，安装完毕后，就可以看到效果了。如果没有自动安装，可以按照控制台的提示手动安装。</p><h2 id="打包app"><a href="#打包app" class="headerlink" title="打包app"></a>打包app</h2><blockquote><p>发行 –&gt; 原生App-云打包，打包结束后会返回一个打包的apk下载地址。下载apk，安装，就好了。当然你也可以 发行 –&gt; 原生App-查看打包状态，查看历史打包的地址等等。</p></blockquote><h2 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h2><p>第一个是下载的apk。</p><p>第二个是安装好的app。</p><p>第三个是打开以后的效果图。<br><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/10/08/006bG9.jpg" alt="效果图"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src= &quot;/img/loading.gif&quot; data-src=&quot;https://s1.ax1x.com/2020/07/03/NjyaGV.jpg&quot; alt=&quot;logo&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;用了taro后，突然想试试做一个app，先做一
      
    
    </summary>
    
    
      <category term="教程" scheme="orangecj.cn/categories/%E6%95%99%E7%A8%8B/"/>
    
      <category term="app" scheme="orangecj.cn/categories/%E6%95%99%E7%A8%8B/app/"/>
    
    
      <category term="app" scheme="orangecj.cn/tags/app/"/>
    
  </entry>
  
  <entry>
    <title>taro | taro使用及结论</title>
    <link href="orangecj.cn/taro/"/>
    <id>orangecj.cn/taro/</id>
    <published>2020-10-08T08:00:00.000Z</published>
    <updated>2020-10-08T09:32:36.930Z</updated>
    
    <content type="html"><![CDATA[<p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/07/03/NjyaGV.jpg" alt="logo"></p><h1 id="taro使用及结论"><a href="#taro使用及结论" class="headerlink" title="taro使用及结论"></a>taro使用及结论</h1><blockquote><p>前段时间用过一次uniapp，后来发现还有个同类型的<a href="https://taro-docs.jd.com/taro/docs/GETTING-STARTED" target="_blank" rel="noopener">taro</a>，于是体验了一番。</p></blockquote><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install -g @tarojs&#x2F;cli</span><br><span class="line"></span><br><span class="line">yarn global add @tarojs&#x2F;cli</span><br></pre></td></tr></table></figure><h2 id="初始化项目"><a href="#初始化项目" class="headerlink" title="初始化项目"></a>初始化项目</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">taro init myApp</span><br></pre></td></tr></table></figure><p>myapp是项目名称。</p><h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># 微信小程序</span><br><span class="line">&quot;dev:weapp&quot;: &quot;npm run build:weapp -- --watch&quot;, </span><br><span class="line">&quot;dev:swan&quot;: &quot;npm run build:swan -- --watch&quot;,</span><br><span class="line"># 支付宝</span><br><span class="line">&quot;dev:alipay&quot;: &quot;npm run build:alipay -- --watch&quot;,</span><br><span class="line">&quot;dev:tt&quot;: &quot;npm run build:tt -- --watch&quot;,</span><br><span class="line"># 网页</span><br><span class="line">&quot;dev:h5&quot;: &quot;npm run build:h5 -- --watch&quot;,</span><br><span class="line">&quot;dev:rn&quot;: &quot;npm run build:rn -- --watch&quot;,</span><br><span class="line">&quot;dev:qq&quot;: &quot;npm run build:qq -- --watch&quot;,</span><br><span class="line">&quot;dev:jd&quot;: &quot;npm run build:jd -- --watch&quot;,</span><br><span class="line">&quot;dev:quickapp&quot;: &quot;npm run build:quickapp -- --watch&quot;</span><br></pre></td></tr></table></figure><h2 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&quot;build:weapp&quot;: &quot;taro build --type weapp&quot;,</span><br><span class="line">&quot;build:swan&quot;: &quot;taro build --type swan&quot;,</span><br><span class="line">&quot;build:alipay&quot;: &quot;taro build --type alipay&quot;,</span><br><span class="line">&quot;build:tt&quot;: &quot;taro build --type tt&quot;,</span><br><span class="line">&quot;build:h5&quot;: &quot;taro build --type h5&quot;,</span><br><span class="line">&quot;build:rn&quot;: &quot;taro build --type rn&quot;,</span><br><span class="line">&quot;build:qq&quot;: &quot;taro build --type qq&quot;,</span><br><span class="line">&quot;build:jd&quot;: &quot;taro build --type jd&quot;,</span><br><span class="line">&quot;build:quickapp&quot;: &quot;taro build --type quickapp&quot;,</span><br></pre></td></tr></table></figure><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>1.安装完taro后，报错，告诉我taro没有。</p><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>1.将taro添加到环境变量中，重新启动就好了。具体如何添加到环境变量中，很简单，找到你安装taro所在文件夹，将 <em>~/@tarojs\cli\bin</em>添加到变量中就行了，~是指你具体的taro所在路径。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src= &quot;/img/loading.gif&quot; data-src=&quot;https://s1.ax1x.com/2020/07/03/NjyaGV.jpg&quot; alt=&quot;logo&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;taro使用及结论&quot;&gt;&lt;a href=&quot;#taro使用及结论&quot;
      
    
    </summary>
    
    
      <category term="技术" scheme="orangecj.cn/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="taro" scheme="orangecj.cn/categories/%E6%8A%80%E6%9C%AF/taro/"/>
    
    
      <category term="taro" scheme="orangecj.cn/tags/taro/"/>
    
  </entry>
  
  <entry>
    <title>摄像头 | 浏览器调用摄像头并实现截图保存的效果</title>
    <link href="orangecj.cn/video/"/>
    <id>orangecj.cn/video/</id>
    <published>2020-09-28T12:47:00.000Z</published>
    <updated>2020-09-28T12:51:29.202Z</updated>
    
    <content type="html"><![CDATA[<p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/07/03/NjyaGV.jpg" alt="logo"></p><h1 id="摄像头-浏览器调用摄像头并实现截图保存的效果"><a href="#摄像头-浏览器调用摄像头并实现截图保存的效果" class="headerlink" title="摄像头 | 浏览器调用摄像头并实现截图保存的效果"></a>摄像头 | 浏览器调用摄像头并实现截图保存的效果</h1><blockquote><p>​为了在QT上实现打开摄像头，拍照等操作。就写了这个。</p></blockquote><h2 id="1-写一个vue组件"><a href="#1-写一个vue组件" class="headerlink" title="1. 写一个vue组件"></a>1. 写一个vue组件</h2><p>先写一个vue的组件，其内容基本如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-button type&#x3D;&quot;primary&quot; @click&#x3D;&quot;openVideo&quot;&gt;打开摄像头&lt;&#x2F;el-button&gt;</span><br><span class="line">&lt;el-button @click&#x3D;&quot;closeVideo&quot;&gt;关闭摄像头&lt;&#x2F;el-button&gt;</span><br><span class="line">&lt;el-button type&#x3D;&quot;danger&quot; @click&#x3D;&quot;screenshot&quot;&gt;截图&lt;&#x2F;el-button&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">  &lt;video id&#x3D;&quot;video&quot; ref&#x3D;&quot;video&quot; &#x2F;&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;canvas ref&#x3D;&quot;canvas&quot; width&#x3D;&quot;400&quot; height&#x3D;&quot;300&quot; style&#x3D;&quot;display:none&quot; &#x2F;&gt;</span><br><span class="line">&lt;!-- 截图展示图片 --&gt;</span><br><span class="line">&lt;img ref&#x3D;&quot;screenshot&quot;&gt;</span><br></pre></td></tr></table></figure><h2 id="2-打开摄像头"><a href="#2-打开摄像头" class="headerlink" title="2. 打开摄像头"></a>2. 打开摄像头</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 打开摄像头</span><br><span class="line">    openVideo() &#123;</span><br><span class="line">      &#x2F;&#x2F; 老的浏览器可能根本没有实现 mediaDevices，所以我们可以先设置一个空的对象</span><br><span class="line">      console.log(&quot;navigator.mediaDevices&quot;, navigator.mediaDevices);</span><br><span class="line">      if (navigator.mediaDevices &#x3D;&#x3D;&#x3D; undefined) &#123;</span><br><span class="line">        navigator.mediaDevices &#x3D; &#123;&#125;;</span><br><span class="line">      &#125;</span><br><span class="line">      &#x2F;&#x2F; 一些浏览器部分支持 mediaDevices。我们不能直接给对象设置 getUserMedia</span><br><span class="line">      &#x2F;&#x2F; 因为这样可能会覆盖已有的属性。这里我们只会在没有getUserMedia属性的时候添加它。</span><br><span class="line">      if (navigator.mediaDevices.getUserMedia &#x3D;&#x3D;&#x3D; undefined) &#123;</span><br><span class="line">        navigator.mediaDevices.getUserMedia &#x3D; constraints &#x3D;&gt; &#123;</span><br><span class="line">          &#x2F;&#x2F; 首先，如果有getUserMedia的话，就获得它</span><br><span class="line">          const getUserMedia &#x3D;</span><br><span class="line">            navigator.getUserMedia ||</span><br><span class="line">            (navigator.getUserMedia &#x3D;</span><br><span class="line">              navigator.mozGetUserMedia ||</span><br><span class="line">              navigator.webkitGetUserMedia ||</span><br><span class="line">              navigator.msGetUserMedia);</span><br><span class="line">          console.log(&quot;getUserMedia&quot;, getUserMedia);</span><br><span class="line">          &#x2F;&#x2F; 一些浏览器根本没实现它 - 那么就返回一个error到promise的reject来保持一个统一的接口</span><br><span class="line">          if (!getUserMedia) &#123;</span><br><span class="line">            return Promise.reject(new Error(&quot;该浏览器暂不支持摄像头！&quot;));</span><br><span class="line">          &#125;</span><br><span class="line">          &#x2F;&#x2F; 否则，为老的navigator.getUserMedia方法包裹一个Promise</span><br><span class="line">          return new Promise((resolve, reject) &#x3D;&gt; &#123;</span><br><span class="line">            getUserMedia.call(navigator, constraints, resolve, reject);</span><br><span class="line">          &#125;);</span><br><span class="line">        &#125;;</span><br><span class="line">      &#125;</span><br><span class="line">      const constraints &#x3D; &#123;</span><br><span class="line">        audio: true,</span><br><span class="line">        video: &#123;</span><br><span class="line">          width: &#123; ideal: 1280, max: 1920 &#125;,</span><br><span class="line">          height: &#123; ideal: 720, max: 1080 &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;;</span><br><span class="line">      console.log(&quot;window.navigator&quot;, window.navigator);</span><br><span class="line">      window.navigator.mediaDevices</span><br><span class="line">        .getUserMedia(constraints)</span><br><span class="line">        .then(stream &#x3D;&gt; &#123;</span><br><span class="line">          const video &#x3D; this.$refs.video;</span><br><span class="line">          &#x2F;&#x2F; 旧的浏览器可能没有srcObject</span><br><span class="line">          if (&quot;srcObject&quot; in video) &#123;</span><br><span class="line">            video.srcObject &#x3D; stream;</span><br><span class="line">          &#125; else &#123;</span><br><span class="line">            &#x2F;&#x2F; 防止在新的浏览器里使用它，因为它已经不再支持了</span><br><span class="line">            video.src &#x3D; window.URL.createObjectURL(stream);</span><br><span class="line">          &#125;</span><br><span class="line">          video.onloadedmetadata &#x3D; e &#x3D;&gt; &#123;</span><br><span class="line">            video.play();</span><br><span class="line">          &#125;;</span><br><span class="line">        &#125;)</span><br><span class="line">        .catch(err &#x3D;&gt; &#123;</span><br><span class="line">          console.log(err.name + &quot;: &quot; + err.message);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>没错，这个代码是在mdn上的，几乎没有任何改变，例子讲的挺好的。</p><h2 id="3-截图并保存"><a href="#3-截图并保存" class="headerlink" title="3. 截图并保存"></a>3. 截图并保存</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 截图</span><br><span class="line">    screenshot() &#123;</span><br><span class="line">      &#x2F;&#x2F; 获取视频</span><br><span class="line">      const video &#x3D; this.$refs.video;</span><br><span class="line">      &#x2F;&#x2F; 获取截图的地址</span><br><span class="line">      const screenshot &#x3D; this.$refs.screenshot;</span><br><span class="line">      &#x2F;&#x2F; 获取canvas</span><br><span class="line">      const canvas &#x3D; this.$refs.canvas;</span><br><span class="line">      &#x2F;&#x2F; 渲染一个2d平面的视图</span><br><span class="line">      const ctx &#x3D; canvas.getContext(&quot;2d&quot;);</span><br><span class="line">      &#x2F;&#x2F; 设置canvas 视图文件地址和大小</span><br><span class="line">      ctx.drawImage(video, 0, 0, 400, 300);</span><br><span class="line">      &#x2F;&#x2F; 将数据转为base64赋值给img标签的src属性</span><br><span class="line">      screenshot.src &#x3D; canvas.toDataURL(&quot;image&#x2F;png&quot;);</span><br><span class="line">      console.log(&quot;screenshot.src&quot;, screenshot.src);</span><br><span class="line">      const imgData &#x3D; canvas</span><br><span class="line">        .toDataURL(&quot;image&#x2F;png&quot;)</span><br><span class="line">        .replace(&quot;image&#x2F;png&quot;, &quot;image&#x2F;octet-stream&quot;);</span><br><span class="line">      &#x2F;&#x2F; 下载图片到本地</span><br><span class="line">      const save_link &#x3D; document.createElementNS(</span><br><span class="line">        &quot;http:&#x2F;&#x2F;www.w3.org&#x2F;1999&#x2F;xhtml&quot;,</span><br><span class="line">        &quot;a&quot;</span><br><span class="line">      );</span><br><span class="line">      save_link.href &#x3D; imgData;</span><br><span class="line">      save_link.download &#x3D; &quot;file_&quot; + new Date().getTime() + &quot;.png&quot;;</span><br><span class="line">      save_link.click();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="4-关闭摄像头"><a href="#4-关闭摄像头" class="headerlink" title="4. 关闭摄像头"></a>4. 关闭摄像头</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 关闭摄像头</span><br><span class="line">    closeVideo() &#123;</span><br><span class="line">      console.log(&quot;srcObject&quot;, this.$refs.video.srcObject);</span><br><span class="line">      const srcObject &#x3D; this.$refs.video.srcObject ? this.$refs.video.srcObject.getTracks() : this.$refs.video.src.getTracks()</span><br><span class="line">      srcObject.forEach(track &#x3D;&gt; &#123;</span><br><span class="line">        track.stop();</span><br><span class="line">        this.$refs.video.src &#x3D; null;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure><p>关闭摄像头，是先获取这个这个视频所在的任务，然后关闭每一个任务，并将其地址设为空。</p><h2 id="5-在electron遇到的问题"><a href="#5-在electron遇到的问题" class="headerlink" title="5. 在electron遇到的问题"></a>5. 在electron遇到的问题</h2><p>开发的时候，在electron中使用遇到调用不了摄像头的问题。经过多次debug之后，发现是http和https的原因。</p><p>所以打包好后的文件在electron中使用，是可以调用摄像头并截图保存的。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src= &quot;/img/loading.gif&quot; data-src=&quot;https://s1.ax1x.com/2020/07/03/NjyaGV.jpg&quot; alt=&quot;logo&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;摄像头-浏览器调用摄像头并实现截图保存的效果&quot;&gt;&lt;a href
      
    
    </summary>
    
    
      <category term="打包" scheme="orangecj.cn/categories/%E6%89%93%E5%8C%85/"/>
    
      <category term="npm" scheme="orangecj.cn/categories/%E6%89%93%E5%8C%85/npm/"/>
    
      <category term="electron-pack" scheme="orangecj.cn/categories/%E6%89%93%E5%8C%85/npm/electron-pack/"/>
    
    
      <category term="electron" scheme="orangecj.cn/tags/electron/"/>
    
  </entry>
  
  <entry>
    <title>electron-pack | electron-pack爬坑记</title>
    <link href="orangecj.cn/electron-pack-qus/"/>
    <id>orangecj.cn/electron-pack-qus/</id>
    <published>2020-09-28T12:21:00.000Z</published>
    <updated>2020-10-08T07:58:54.515Z</updated>
    
    <content type="html"><![CDATA[<p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/07/03/NjyaGV.jpg" alt="logo"></p><h1 id="electron-pack-electron-pack爬坑记"><a href="#electron-pack-electron-pack爬坑记" class="headerlink" title="electron-pack | electron-pack爬坑记"></a>electron-pack | electron-pack爬坑记</h1><blockquote><p>electron-pack是我个人开发的一个方便自己使用的npm安装包。他的诞生经历了不少的坎坷。</p></blockquote><h2 id="1-app-requestSingleInstanceLock-is-not-a-function"><a href="#1-app-requestSingleInstanceLock-is-not-a-function" class="headerlink" title="1. app .requestSingleInstanceLock  is not a function"></a>1. app .requestSingleInstanceLock  is not a function</h2><p>目测原因：在require的时候，app为undefined，所以肯定是没有。</p><p>解决方案：对项目进行打包，希望将第三方插件electron引入进来。</p><h2 id="2-Can’t-resolve-‘fs’-in-‘D-packages-npm-node-modules…’"><a href="#2-Can’t-resolve-‘fs’-in-‘D-packages-npm-node-modules…’" class="headerlink" title="2. Can’t resolve ‘fs’ in ‘D:\packages\npm\node_modules…’"></a>2. Can’t resolve ‘fs’ in ‘D:\packages\npm\node_modules…’</h2><p>目测原因：在打包的时候似乎是require的问题，node和webpack都有require，但是是不一样的。(只是我的猜想，别喷)</p><p>解决方案：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">node: &#123;</span><br><span class="line">         fs: &#39;empty&#39;,</span><br><span class="line">         net:&#39;empty&#39;,</span><br><span class="line">         tls:&quot;empty&quot;,</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>结果：在后续中运行报错： Uncaught TypeError: fs.existsSync is not a function</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">       target:&quot;node&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：在后续运行中报错：Electron failed to install correctly, please delete node_modules/electron and try installing again</p><h2 id="3-解决2的问题"><a href="#3-解决2的问题" class="headerlink" title="3. 解决2的问题"></a>3. 解决2的问题</h2><p>这样看起来问题挺多的，看了第一个问题，似乎还真有人解决过这个问题，但是他缺少一个文件，而我不缺少，所以先排除了这个问题，甚至是这个解决方法都是错的。直接看后面的错误。</p><p>似乎看不出来啥，于是去webpack官网查了下 target 这个参数，里面有很多的参数，悄悄盯了一下，发现很多参数，其中有为electron提供的参数值。改代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    target:&quot;electron-main&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​结果：顺利运行​</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src= &quot;/img/loading.gif&quot; data-src=&quot;https://s1.ax1x.com/2020/07/03/NjyaGV.jpg&quot; alt=&quot;logo&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;electron-pack-electron-pack爬坑记&quot;
      
    
    </summary>
    
    
      <category term="打包" scheme="orangecj.cn/categories/%E6%89%93%E5%8C%85/"/>
    
      <category term="npm" scheme="orangecj.cn/categories/%E6%89%93%E5%8C%85/npm/"/>
    
      <category term="electron-pack" scheme="orangecj.cn/categories/%E6%89%93%E5%8C%85/npm/electron-pack/"/>
    
    
      <category term="electron" scheme="orangecj.cn/tags/electron/"/>
    
  </entry>
  
  <entry>
    <title>npm包 | 我的第一个npm安装包</title>
    <link href="orangecj.cn/FIRST_NPM/"/>
    <id>orangecj.cn/FIRST_NPM/</id>
    <published>2020-09-28T12:15:00.000Z</published>
    <updated>2020-10-08T07:58:58.477Z</updated>
    
    <content type="html"><![CDATA[<p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/07/03/NjyaGV.jpg" alt="logo"></p><h1 id="我的第一个npm安装包"><a href="#我的第一个npm安装包" class="headerlink" title="我的第一个npm安装包"></a>我的第一个npm安装包</h1><blockquote><p>应公司业务要求，需要制作桌面安装程序。同时也要替代QT，制作QT的安装程序。所以最后我选用了electron制作exe，配合Inno Setup Compiler制作安装包。因为这玩意是我一个人在研究，为了避免我哪天休息不在，还找我打包的情况，我特意写了将这个项目制作成为了一个npm安装包，并附上相应文档，相信还是能看懂的。</p></blockquote><h2 id="1-将自己的函数导出"><a href="#1-将自己的函数导出" class="headerlink" title="1. 将自己的函数导出"></a>1. 将自己的函数导出</h2><p>src/main.js 是我的主要代码文件。</p><p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/09/28/0VtNZQ.png" alt="代码"></p><p>index.js 是我引用main.js的文件，并导出，也就是整个npm的入口文件了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">module.exports &#x3D; require(&#39;.&#x2F;src&#x2F;main&#39;)</span><br></pre></td></tr></table></figure><p>build/index.js 是我使用webpack打包的文件。因为需要将第三方插件的引用打包。避免使用引用错误，这里如果纯自己开发的，不引用第三方插件，不需要打包。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">const path &#x3D; require(&#39;path&#39;)</span><br><span class="line">​</span><br><span class="line">module.exports &#x3D; &#123;</span><br><span class="line">    entry: &#39;.&#x2F;index.js&#39;,</span><br><span class="line">    output: &#123;</span><br><span class="line">        path: path.join(__dirname, &#39;dist&#39;),</span><br><span class="line">        filename: &#39;bundle.js&#39;</span><br><span class="line">    &#125;,</span><br><span class="line">    mode: &#39;development&#39;,</span><br><span class="line">    target: &#39;electron-main&#39;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-将package-json的main改为index-js"><a href="#3-将package-json的main改为index-js" class="headerlink" title="3. 将package.json的main改为index.js"></a>3. 将package.json的main改为index.js</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;mian&quot;: &quot;index.js&quot;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">​&quot;dev1&quot;: &quot;npx webpack --config build&#x2F;index.js&quot;,</span><br><span class="line">&quot;pub&quot;: &quot;npm run dev1 &amp;&amp; npm version patch &amp;&amp; npm publish&quot;,</span><br><span class="line">&quot;minor&quot;: &quot;npm run dev1 &amp;&amp; npm version minor &amp;&amp; npm publish&quot;,</span><br><span class="line">&quot;major&quot;: &quot;npm run dev1 &amp;&amp; npm version major &amp;&amp; npm publish&quot;,</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm run pub 打包 更新补丁  并上传npm包</span><br><span class="line">npm run minor 打包 更新小版本  并上传npm包</span><br><span class="line">npm run major 打包 更新大版本  并上传npm包</span><br></pre></td></tr></table></figure><h2 id="3-使用"><a href="#3-使用" class="headerlink" title="3. 使用"></a>3. 使用</h2><p>首先安装依赖。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i electron-pack</span><br></pre></td></tr></table></figure><p>然后引用。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">const pack &#x3D; require(&#39;electron-pack&#39;)</span><br><span class="line">​</span><br><span class="line">const config &#x3D; &#123;</span><br><span class="line">    width: 1280, &#x2F;&#x2F; 窗口的宽度</span><br><span class="line">    minWidth: 1280, &#x2F;&#x2F; 窗口最小宽度</span><br><span class="line">    height: 960, &#x2F;&#x2F; 窗口高度</span><br><span class="line">    minHeight: 960, &#x2F;&#x2F; 窗口最小高度</span><br><span class="line">    frame: true, &#x2F;&#x2F; 是否有边框</span><br><span class="line">    center: true, &#x2F;&#x2F; 窗口是否在中心</span><br><span class="line">    minimizable: true, &#x2F;&#x2F;窗口是否可以最小化</span><br><span class="line">    maximizable: true, &#x2F;&#x2F;窗口是否可以最大化</span><br><span class="line">    url: &#39;https:&#x2F;&#x2F;orangecj.com&#39;, &#x2F;&#x2F; 打包地址</span><br><span class="line">    isWeb: true, &#x2F;&#x2F; 是否是网站</span><br><span class="line">    openDevTools: true, &#x2F;&#x2F; 是否打开开发者工具</span><br><span class="line">&#125;</span><br><span class="line">​</span><br><span class="line">pack(config)</span><br></pre></td></tr></table></figure><p>最后运行大功告成。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src= &quot;/img/loading.gif&quot; data-src=&quot;https://s1.ax1x.com/2020/07/03/NjyaGV.jpg&quot; alt=&quot;logo&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;我的第一个npm安装包&quot;&gt;&lt;a href=&quot;#我的第一个npm
      
    
    </summary>
    
    
      <category term="打包" scheme="orangecj.cn/categories/%E6%89%93%E5%8C%85/"/>
    
      <category term="npm" scheme="orangecj.cn/categories/%E6%89%93%E5%8C%85/npm/"/>
    
    
      <category term="electron" scheme="orangecj.cn/tags/electron/"/>
    
  </entry>
  
  <entry>
    <title>博客 | 如何快速搭建个人博客</title>
    <link href="orangecj.cn/website/"/>
    <id>orangecj.cn/website/</id>
    <published>2020-08-19T15:35:00.000Z</published>
    <updated>2020-08-23T14:52:29.643Z</updated>
    
    <content type="html"><![CDATA[<p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/07/03/NjyaGV.jpg" alt="logo"></p><blockquote><p>我们这一生很短，我们终将会失去它，所以不妨大胆一点，爱一个人，攀一座山，追一次梦，不妨大胆一点，有很多事没有答案。<br>有时候想发表点文章，照片视频什么之类的，方便手机随时查看，而不占用手机内存。还没有太多的局限。那么搭建自己的个人博客是最好的选择了。</p></blockquote><h2 id="搭建最基础的博客框架"><a href="#搭建最基础的博客框架" class="headerlink" title="搭建最基础的博客框架"></a>搭建最基础的博客框架</h2><p>我是直接使用hexo搭建最基础的框架的。</p><p>具体的文档，可以去hexo官网查看。（<a href="https://hexo.io/zh-cn/docs/）" target="_blank" rel="noopener">https://hexo.io/zh-cn/docs/）</a></p><p>具体命令如下：</p><h3 id="安装脚手架："><a href="#安装脚手架：" class="headerlink" title="安装脚手架："></a>安装脚手架：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><h3 id="初始化博客："><a href="#初始化博客：" class="headerlink" title="初始化博客："></a>初始化博客：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init blog</span><br></pre></td></tr></table></figure><h3 id="hexo常用命令："><a href="#hexo常用命令：" class="headerlink" title="hexo常用命令："></a>hexo常用命令：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hexo clean # 用于清理缓存</span><br><span class="line">hexo g # 生成新的文件</span><br><span class="line">hexo d # 上传</span><br><span class="line">hexo serve # 运行本地博客</span><br></pre></td></tr></table></figure><p>当然，安装hexo之前你需要安装node。</p><p>当你初始化完博客之后，hexo serve运行博客，就可以在控制台查看到一盒链接，在浏览器输入链接（localhost:4000)即可查看博客长什么样子了。</p><h2 id="更换主题"><a href="#更换主题" class="headerlink" title="更换主题"></a>更换主题</h2><p>在初始化之后，你会感觉自己的你博客不怎么好看，没关系，更换一个主题即可。网上有很多的主题，选择自己喜欢的。</p><p>下载下来，在自己的_config.yml文件里面，找到theme，将后面的主题改为自己下载的名字。</p><h2 id="发表文章"><a href="#发表文章" class="headerlink" title="发表文章"></a>发表文章</h2><p>通过markdown来编辑文章。</p><p>常用的markdown语法如下：</p><h3 id="标题："><a href="#标题：" class="headerlink" title="标题："></a>标题：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 一级标题</span><br><span class="line">## 二级标题</span><br><span class="line">### 三级标题</span><br><span class="line">....</span><br></pre></td></tr></table></figure><h3 id="字体："><a href="#字体：" class="headerlink" title="字体："></a>字体：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">**加粗**</span><br><span class="line">*倾斜*</span><br><span class="line">~~删除线~~</span><br></pre></td></tr></table></figure><h3 id="引用："><a href="#引用：" class="headerlink" title="引用："></a>引用：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;这是引用的文字</span><br></pre></td></tr></table></figure><h3 id="分割线："><a href="#分割线：" class="headerlink" title="分割线："></a>分割线：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">***</span><br><span class="line">--- # 三个以上的就行了</span><br></pre></td></tr></table></figure><h3 id="图片："><a href="#图片：" class="headerlink" title="图片："></a>图片：</h3><p><code>![图片](图片的url地址)</code></p><h3 id="超链接："><a href="#超链接：" class="headerlink" title="超链接："></a>超链接：</h3><p><code>[文字](超链接地址url)</code></p><h3 id="代码块："><a href="#代码块：" class="headerlink" title="代码块："></a>代码块：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#96;代码内容&#96;  #单行代码</span><br><span class="line">#多行代码</span><br><span class="line">(&#96;&#96;&#96;)</span><br><span class="line">  代码内容</span><br><span class="line">(&#96;&#96;&#96;)</span><br></pre></td></tr></table></figure><h2 id="托管博客"><a href="#托管博客" class="headerlink" title="托管博客"></a>托管博客</h2><p>我们将改好的文章，可以在GitHub上进行托管，当然也可以在其他同类型的网站上进行托管。</p><p>首先，注册一个GitHub账号，创建一个仓库，仓库名称一定是一下格式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">你的GitHub账号名称+github.io</span><br></pre></td></tr></table></figure><p>就像这个样子的：<br><img src= "/img/loading.gif" data-src="https://pic1.zhimg.com/80/v2-54e0513ab87b4781ee594d12554a0889_720w.jpg" alt="地址"></p><p>然后将git上新建的仓库和你的博客绑定在一起。</p><p>找到_config.yml，更改：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">type: git</span><br><span class="line">repo: 这里填入你之前在GitHub上创建仓库的完整路径，记得加上 .git(类似https:&#x2F;&#x2F;github.com&#x2F;orangeed&#x2F;orangeed.github.io.git)</span><br><span class="line">branch: master</span><br></pre></td></tr></table></figure><p>这样你打开orangeed.github.io就可以访问你的个人博客了。但是网址看起来不是很雅观！</p><h2 id="更换域名"><a href="#更换域名" class="headerlink" title="更换域名"></a>更换域名</h2><p>花10几大洋，在腾讯云或者阿里云或者万网上面购买一个域名，一年。然后解析。注意，这里的解析，建议是如下的配置：<br><img src= "/img/loading.gif" data-src="https://pic2.zhimg.com/80/v2-4fc218e0f8837a850ae8e39f0482ee51_720w.png" alt="域名解析"></p><p>然后，你需要在你的根目录上添加一个文件，不要后缀，文件名为CNAME。里面的内容就是你购买的域名名称。例如：orangecj.cn。</p><p>然后你在通过域名访问，即可浏览个人博客了。</p><h2 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h2><p>拓展：为你的博客增加点东西。</p><p>你可以在博客中，放一些照片，视频，音乐。</p><p>同时你也可以使用插件丰富网站。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src= &quot;/img/loading.gif&quot; data-src=&quot;https://s1.ax1x.com/2020/07/03/NjyaGV.jpg&quot; alt=&quot;logo&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;我们这一生很短，我们终将会失去它，所以不妨大胆
      
    
    </summary>
    
    
      <category term="教程" scheme="orangecj.cn/categories/%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="博客" scheme="orangecj.cn/tags/%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>装机 | 我的第一次？</title>
    <link href="orangecj.cn/diy/"/>
    <id>orangecj.cn/diy/</id>
    <published>2020-06-20T05:39:00.000Z</published>
    <updated>2020-07-04T06:01:20.422Z</updated>
    
    <content type="html"><![CDATA[<p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/07/03/NjyaGV.jpg" alt="logo"></p><p>不知道是多少天了，在无数个难眠的夜晚，我辗转反侧，想有自己的台式电脑，最好是自己组装的，正好，今年刚刚毕业，又赶上了618活动，就开始买买买（虽然自己是在之前两天买的）！</p><p>显示器买了快半个月了，在家都是将他作为笔记本电脑的主显示器了，笔记本电脑反而成为了默默的主机….可怜兮兮！</p><p>后来买了机械键盘，笔记本电脑就真正成为了主机….</p><p>好嘞！我预算有限，就买了一些比较入门的配置，打算以后经济好了再换吧！配置如下:</p><h2 id="屏幕以及其他"><a href="#屏幕以及其他" class="headerlink" title="屏幕以及其他"></a>屏幕以及其他</h2><p>显示器：京东买的夏晶，以前也没有听过，买的时候500多，就因为看到是降价了，才买的，谁也没想到，现在都700多了！那岂不是血赚？？？</p><p><img src= "/img/loading.gif" data-src="https://pic3.zhimg.com/80/v2-652bcc0a9d628604b94f595a82c80d22_720w.jpg" alt="屏幕"></p><p>键盘：入门级普通机械键盘</p><p>鼠标：楼下39元鼠标</p><p>小音箱：楼下60元双声道小音箱</p><h2 id="机箱"><a href="#机箱" class="headerlink" title="机箱"></a>机箱</h2><p>机箱：ATX机箱，小风扇不少！居然有3个。</p><p><img src= "/img/loading.gif" data-src="https://pic1.zhimg.com/80/v2-9e44c34c8dfec0ef63a812ef4dc3d868_720w.jpg" alt="机箱"></p><h2 id="硬盘"><a href="#硬盘" class="headerlink" title="硬盘"></a>硬盘</h2><p>硬盘：英睿达MX500，500G的SSD，刚开始买的399，打折啊！！！没想到618的价格也和这个差不多，就是1T的价格下降的多，早知道买1T的了，感觉血亏。不过现在这个又涨价上去了，想想还是赚了。</p><p><img src= "/img/loading.gif" data-src="https://pic2.zhimg.com/80/v2-e72ed9bf1742ed1fe6f0227d8ab767b9_720w.jpg" alt="硬盘"></p><h2 id="电源"><a href="#电源" class="headerlink" title="电源"></a>电源</h2><p>电源：爱国者的模组版电源，279大洋，优惠后274大洋。</p><p><img src= "/img/loading.gif" data-src="https://pic1.zhimg.com/80/v2-1b1d4133af6cd0b9e8ecc3a75c2a3d64_720w.jpg" alt="电源"></p><h2 id="内存条"><a href="#内存条" class="headerlink" title="内存条"></a>内存条</h2><p>内存条：一条8G的3200MHZ的，210大洋。本来想买两条的，但是预算不太行，别问我为啥不直接买一条16G的，因为两条是双通道，比一条道快点，就像马路一样，一条道路始终比两条道路堵一点。至少我是这个觉得的</p><p><img src= "/img/loading.gif" data-src="https://pic4.zhimg.com/80/v2-c3c7f21ecee1178ef3b5cc2d2fd86d8b_720w.jpg" alt="内存条"></p><h2 id="主板套装"><a href="#主板套装" class="headerlink" title="主板套装"></a>主板套装</h2><p>主板套装：AMD R5 3500X和华擎主板，1179大洋。别问我为什么不选择intel的处理器。问就是没钱，所以选择了和i5-9400f性能接近的R5 3500X，感觉用起来挺好的，而且在某些方面超过了i5-9400f。</p><p><img src= "/img/loading.gif" data-src="https://pic4.zhimg.com/80/v2-99e0f2fc8ffcc701a0457d17425b33eb_720w.jpg" alt="主板套装"></p><h2 id="硅脂"><a href="#硅脂" class="headerlink" title="硅脂"></a>硅脂</h2><p>硅脂：散热器硅脂，追风者的。</p><p><img src= "/img/loading.gif" data-src="https://pic4.zhimg.com/80/v2-b6b8ee32a42a9f6c002056b45ecc13e7_720w.jpg" alt="硅脂"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这些加起来大概4000多。基本够了一般般情况使用。普通游戏，一般编程啥的，毫无压力的。当然设计的话，可能没有人家9000多专门配置设计来的爽！但是有需求的话，后面还是可以升级的！比如内存条加一个，CPU套装换一个啥的！比如换成intel啥的！</p><p>大大小小的配件，可还是花了我不少时间去组装，毕竟第一次组装，经验不足，还问了商家一些问题，好在是后面自己都给装好了。</p><p>原文链接:<br><a href="https://zhuanlan.zhihu.com/p/149709121" target="_blank" rel="noopener">知乎_橘子的分享</a><br><a href="https://mp.weixin.qq.com/s/dCLIoZPkHTE4GJn4G4AIFQ" target="_blank" rel="noopener">微信公众号_橘子的分享</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src= &quot;/img/loading.gif&quot; data-src=&quot;https://s1.ax1x.com/2020/07/03/NjyaGV.jpg&quot; alt=&quot;logo&quot;&gt;&lt;/p&gt;
&lt;p&gt;不知道是多少天了，在无数个难眠的夜晚，我辗转反侧，想有自己的台式电脑，最
      
    
    </summary>
    
    
      <category term="教程" scheme="orangecj.cn/categories/%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="装机" scheme="orangecj.cn/tags/%E8%A3%85%E6%9C%BA/"/>
    
      <category term="DIV" scheme="orangecj.cn/tags/DIV/"/>
    
      <category term="电脑" scheme="orangecj.cn/tags/%E7%94%B5%E8%84%91/"/>
    
  </entry>
  
  <entry>
    <title>毕业 | 人生百态，我是其一</title>
    <link href="orangecj.cn/gradution/"/>
    <id>orangecj.cn/gradution/</id>
    <published>2020-06-10T04:43:08.000Z</published>
    <updated>2020-07-06T13:25:13.059Z</updated>
    
    <content type="html"><![CDATA[<p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/07/03/NjyaGV.jpg" alt="logo"></p><blockquote><p>如果我们有机会重返青春现场，一定发现，那个青春，与我们相携终身，不断怀念，惊鸿照影的青春有异，我们对它的怀念，是一种刻骨的高估。</p></blockquote><p>这是一篇碎碎念的帖子，没有以往的技术贴，也没有什么分享帖，有的只是碎碎念。</p><p>2016年入学，2020年毕业，时光荏苒….当然我也不想说这些屁话，废话。</p><p>不过还是要写写什么的。就算是给自己的大学给一个交代吧。</p><h2 id="关于兴趣与比赛"><a href="#关于兴趣与比赛" class="headerlink" title="关于兴趣与比赛"></a>关于兴趣与比赛</h2><p>大一，拥有了自己的第一台电脑。自己可劲折腾，各种软件都想尝试，各种系统也都试用，甚至是开始了拆机之旅。虽然对很多人说，那是一个非常简单的事情，可是在那个时候，我是真的第一次。</p><p>大一，我也开始比赛之旅，这条不归路还是被英语、日语专业等朋友带起来的，可以说他们是最大的共犯了。从此到大三，我才结束了我这罪恶的比赛之旅，没有什么大的成绩，小成绩不断，小打小闹的。现在想想，大一和大家在1402（应该是这个办公室？）写材料，初现稚嫩。后来大二，占用了赵文浩学长的办公室，和老邓、天正、凯捷等开始熬夜通宵写材料，开始熟练于心。大三，自己带了团队，但是结果不怎么美好，虽然也拿了奖。</p><h2 id="关于工作"><a href="#关于工作" class="headerlink" title="关于工作"></a>关于工作</h2><p>四年，参加了不少的工作，认识了不少的人，有的现在和我一样毕业了，有的待业中，有的走上了新的岗位，有的创业了。似乎大家都在各自的生活圈中混的风生水起，但是谁又知道谁的苦楚？前两天还有朋友让我陪他去寺庙祈福，赶走水逆。</p><p>有的创业了，几年下来，失败一个又一个项目，却就像打不倒的小强似得，也是越战越勇，继往开来，前段时间还聊到他们公司，问了基本情况，他们还招人的哟，有兴趣的可以问我，我帮忙推荐。有的始终坚持着自己创业梦想，未曾改变，坚持肯定是会有结果的！</p><p>其实，我想说的是，在大学多参加工作，认识的人也就会很多，会很有趣。同时在大四或者毕业后，项目经历或者说是工作经历是一个非常重要的指数。</p><h2 id="关于聚餐"><a href="#关于聚餐" class="headerlink" title="关于聚餐"></a>关于聚餐</h2><p>从小到大，聚散都习以为常。</p><p>毕业，这个也是经历了一次又一次，印象最深刻的还是高中毕业了吧。怎么形容当时的我呢，交际花吧？不对，应该是交际草！哈哈哈，和班级的每一个人都拥有很好的关系，还有旁边文科班以及楼下的几个理科班的同学。毕业当天，我的白色班级短袖上写满了同学的名字，似乎写下了名字，就能把他们留在了我身边一辈子。拍了很多的毕业照，都在我现在的那个坏掉的手机以及云空间里。还要找个时间，把手机的数据提取出来才行。</p><p>入夜，仿佛城市才开始醒来，一起到了酒店（听说星级很高，忘了名字），吃得少，喝的多，一箱酒，下肚，几趟厕所，坐在凳子上，目视前方，一言不发，明显我是醉了，只是还能思考而已，身体不太听使唤。隔壁桌子是其他学校，现场表白在一起。如此氛围，我也没有说出一些话的勇气，可能只是一份担不起的责任。第二天头晕目眩的参加了口语考试，还好遇到了自己的英语老师。</p><p>而现在，大学毕业，仿佛缺了点什么，自己工作，同时也不想在喝很多的酒，更加不像因为分别而伤心。以前的我，总是在别人走后我在选择离开，这样的话，他们就看不到我离开的背影，而是我看到大家离开的背影。这次毕业，我选择了不参加毕业聚餐，拍完毕业照，直接溜掉。不想因为分别而感到一丝丝心情的波动，同样，大四一直都在外面，离开校园很久，感觉很多时候，很多话题都不在了。</p><h2 id="关于爱"><a href="#关于爱" class="headerlink" title="关于爱"></a>关于爱</h2><p>别问！！！问就是没有，大学四年，没有谈过。</p><p>自从和前任分手后，自己感觉对于这个爱情来说，我认为是一份责任，我现在没有物质担得起，选择不谈，但是很多时候也是很羡慕别人。有和别人以开玩笑的形式聊到这个话题，聊着聊着，我就不敢再说了。别问，问就是没钱陪你high爆整个青春。 </p><h2 id="关于想说的话"><a href="#关于想说的话" class="headerlink" title="关于想说的话"></a>关于想说的话</h2><p>想说的话很多很多…..</p><p>eg:</p><p>感谢周志丹老师、王绍卜老师等很多老师在大学里面对我的照顾。</p><p>劝诫学弟学妹们，多多参加和自己未来工作相关或者专业相关的实习，大公司最好。</p><p>希望学弟学妹们，还是多谈谈恋爱吧，别给自己留下遗憾，千万不要学我！！！</p><p>希望学弟学妹们，多多参加比赛以及社会实践等等，增加自己的见识，真的！！！同时练好基础！不然你到时候后悔莫及！</p><p>以上！！！来自一个电子商务专业，却是程序员的2020届毕业生亲身所述。</p><p>原文链接:<br><a href="https://zhuanlan.zhihu.com/p/147359841" target="_blank" rel="noopener">知乎_橘子的分享</a><br><a href="https://mp.weixin.qq.com/s/qGhbt96XDQSYSOJoJ40jyQ" target="_blank" rel="noopener">微信公众号_橘子的分享</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src= &quot;/img/loading.gif&quot; data-src=&quot;https://s1.ax1x.com/2020/07/03/NjyaGV.jpg&quot; alt=&quot;logo&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;如果我们有机会重返青春现场，一定发现，那个青春
      
    
    </summary>
    
    
      <category term="生活" scheme="orangecj.cn/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="毕业" scheme="orangecj.cn/tags/%E6%AF%95%E4%B8%9A/"/>
    
      <category term="生活" scheme="orangecj.cn/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>软著 | 手把手教你如何申请软著</title>
    <link href="orangecj.cn/softwriting/"/>
    <id>orangecj.cn/softwriting/</id>
    <published>2020-05-17T05:39:00.000Z</published>
    <updated>2020-07-06T13:15:02.289Z</updated>
    
    <content type="html"><![CDATA[<p><img src= "/img/loading.gif" data-src="https://s1.ax1x.com/2020/07/03/NjyaGV.jpg" alt="logo"></p><p>毕业设计，经过磨难，终于写出了一个基本版本，我称他为1.0.0版本。这是一个电子商务网站，包括前台购买，后台管理系统，数据库和服务端。较为完整，就申请了个软著，后面也没有继续完善嘞。</p><h2 id="1-准备好要申请的软件"><a href="#1-准备好要申请的软件" class="headerlink" title="1 准备好要申请的软件"></a>1 准备好要申请的软件</h2><p>软著，全称软件著作权，这个简单的讲，就是拿一个软件去申请一个软件属于你的权利，所以软件是核心，最好是自己写的，或者是没有过的。反正就是不要抄袭别人的就好了。</p><h2 id="2-准备两份材料"><a href="#2-准备两份材料" class="headerlink" title="2 准备两份材料"></a>2 准备两份材料</h2><p>两份材料，包含了代码部分和软件设计书或者软件使用说明书。</p><p>代码部分，很简单，将你的程序软件的核心代码拷贝一份，放在一个文件下面，必要要有60页，其实这个很简单的，一个软件程序，动不动就是几千行上万行的。</p><p>软件设计书，或者软件使用说明书。前者，就是写你这个程序当时是怎么设计的，系统需求，系统设计，系统实现这几个部分是最重要的，还要写数据库是怎么设计的，包含了哪些表，表里面含有哪些字段。软件使用说明书，就是指这个软件是怎么使用的，你要一步一步的说明哪个功能模块怎么进入，怎么操作，会得到什么结果之类的。这个就比较详细，但是一般也没超过20页。</p><h2 id="3-准备合作开发合同"><a href="#3-准备合作开发合同" class="headerlink" title="3 准备合作开发合同"></a>3 准备合作开发合同</h2><p>如果你是个人开发的，就可以跳过这一步了，只有是合作开发的时候，才需要一个合作开发合同，这样是为了保证两个人的权利问题。防止以后扯皮或者其他什么问题。</p><h2 id="4-打印好以下的材料"><a href="#4-打印好以下的材料" class="headerlink" title="4 打印好以下的材料"></a>4 打印好以下的材料</h2><p>打印一份代码，打印一份软件设计书，打印一份合作开发合同，加起来也不贵，就几十元的样子。然后你需要去“中国版权保护中心”登录一下你的帐号进行填写软著申报登记（计算机软件著作权登记申请表），然后将这个填写好的登记表打印出来，在上面签字填写必要的信息就好了。最后将这些东西寄出去，地址是北京市西城区天桥南大街1号天桥艺术大厦A座三层。</p><h2 id="5-下面就是漫长的等待"><a href="#5-下面就是漫长的等待" class="headerlink" title="5 下面就是漫长的等待"></a>5 下面就是漫长的等待</h2><p>2019年12月24日，我登记了软著，并将材料寄出去了，然后就是等待了。</p><p>2020年2月11日，才开始受理登记。</p><p>2020年3月18日开始审查，领导审批。</p><p>2020年3月19日发证。</p><p>2020年4月15日收到快递，拿到了心念已久的软件著作权登记证书。</p><p><img src= "/img/loading.gif" data-src="https://pic2.zhimg.com/80/v2-521b111ecfc11b6ac08dd08c278c23b5_720w.jpg" alt="软著申请流程图"></p><p>时间稍微有点久，可能也是因为疫情的原因吧。</p><p>这是拿到的快递样子。</p><p><img src= "/img/loading.gif" data-src="https://pic1.zhimg.com/80/v2-a9396b2d8e249194f9eec4c86ebabc18_720w.jpg" alt="快递图"></p><p>这是里面的软件著作权登记证书。</p><p><img src= "/img/loading.gif" data-src="https://pic1.zhimg.com/80/v2-beed3eb8cde90342f51f9784cf90590c_720w.jpg" alt="证书图"></p><p>嗯….图片较为模糊，毕竟自己的老年人手机用了好久了，摄像头都被磨损了。害！将就看吧<del>~</del></p><p>有想申请软著的朋友，不同的地方可以问我哈，虽然我也只是申请了一次，但是会的会说的，不会的就….无能为力嘞！</p><p>就这样吧，以上！</p><p>原文链接:<br><a href="https://zhuanlan.zhihu.com/p/141529705" target="_blank" rel="noopener">知乎_橘子的分享</a><br><a href="https://mp.weixin.qq.com/s/s04atr0HO-axxHopW9_wVg" target="_blank" rel="noopener">微信公众号_橘子的分享</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src= &quot;/img/loading.gif&quot; data-src=&quot;https://s1.ax1x.com/2020/07/03/NjyaGV.jpg&quot; alt=&quot;logo&quot;&gt;&lt;/p&gt;
&lt;p&gt;毕业设计，经过磨难，终于写出了一个基本版本，我称他为1.0.0版本。这是
      
    
    </summary>
    
    
      <category term="教程" scheme="orangecj.cn/categories/%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="软著" scheme="orangecj.cn/tags/%E8%BD%AF%E8%91%97/"/>
    
  </entry>
  
</feed>
